/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.cailab.hdf5compression;

import javax.swing.SwingUtilities;

import ij.IJ;
import ij.ImagePlus;
import ij.io.SaveDialog;
import ij.plugin.filter.PlugInFilter;
import ij.process.ImageProcessor;



/**
 *
 * @author weijie
 * @author duanb
 */
public class MainWindow extends javax.swing.JFrame implements PlugInFilter {
    private String selectedFilename = null;
    private Thread currThread = null;
    private long startTime = 0;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        // initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectFileButton = new javax.swing.JButton();
        encoderComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        presetComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        tuneComboBox = new javax.swing.JComboBox<>();
        compressButton = new javax.swing.JButton();
        selectedFile = new javax.swing.JLabel();
        statusPanel = new javax.swing.JPanel();
        statusText = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        cancelButton = new javax.swing.JButton();
        filmGrainPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        filmGrainSlider = new javax.swing.JSlider();
        filmGrainLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        qualitySlider = new javax.swing.JSlider();
        qualityLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        selectFileButton.setText("Select Save File");
        selectFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFileButtonActionPerformed(evt);
            }
        });

        encoderComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "mpeg4", "libxvid", "libx264", "h264_nvenc", "libx265", "hevc_nvenc", "libsvtav1", "librav1e", "av1_nvenc", "av1_qsv", " " }));
        encoderComboBox.setSelectedIndex(2);
        encoderComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encoderComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Encoder:");

        jLabel2.setText("Preset:");
        encoderComboBoxActionPerformed(null);

        presetComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                presetComboBoxActionPerformed(evt);
            }
        });

        jLabel3.setText("Tune");

        compressButton.setText("Compress");
        compressButton.setEnabled(false);
        compressButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compressButtonActionPerformed(evt);
            }
        });

        statusPanel.setVisible(false);

        statusText.setText("Compressing...");

        cancelButton.setLabel("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(statusText)
                            .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cancelButton)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jLabel6.setText("Film Grain");

        filmGrainSlider.setMaximum(50);
        filmGrainSlider.setValue(0);
        filmGrainSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                filmGrainSliderStateChanged(evt);
            }
        });

        filmGrainLabel.setText("0");

        javax.swing.GroupLayout filmGrainPanelLayout = new javax.swing.GroupLayout(filmGrainPanel);
        filmGrainPanel.setLayout(filmGrainPanelLayout);
        filmGrainPanelLayout.setHorizontalGroup(
            filmGrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filmGrainPanelLayout.createSequentialGroup()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filmGrainSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filmGrainLabel)
                .addContainerGap(100, Short.MAX_VALUE))
        );
        filmGrainPanelLayout.setVerticalGroup(
            filmGrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, filmGrainPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(filmGrainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(filmGrainLabel))
                .addGap(37, 37, 37))
            .addGroup(filmGrainPanelLayout.createSequentialGroup()
                .addComponent(filmGrainSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel4.setText("Quality");

        qualitySlider.setMinorTickSpacing(1);
        qualitySlider.setSnapToTicks(true);
        qualitySlider.setToolTipText("");
        qualitySlider.setValue(100);
        qualitySlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                qualitySliderStateChanged(evt);
            }
        });

        qualityLabel.setText("100");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(qualitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(qualityLabel)
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(qualityLabel)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(qualitySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(selectedFile))
                    .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(compressButton)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filmGrainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(encoderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tuneComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(presetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(302, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFileButton)
                    .addComponent(selectedFile, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(encoderComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(presetComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(tuneComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filmGrainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(compressButton)
                .addGap(18, 18, 18)
                .addComponent(statusPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(164, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private int get_decoder_from_encoder(int c_id) {
		switch(c_id) {
			case Constants.FFH5_ENC_MPEG4:
			case Constants.FFH5_ENC_XVID:
				return Constants.FFH5_DEC_MPEG4;
			case Constants.FFH5_ENC_X264:
				return Constants.FFH5_DEC_H264;
			case Constants.FFH5_ENC_H264_NV:
				return Constants.FFH5_DEC_H264_CUVID;
			case Constants.FFH5_ENC_X265:
				return Constants.FFH5_DEC_HEVC;
			case Constants.FFH5_ENC_HEVC_NV:
				return Constants.FFH5_DEC_HEVC_CUVID;
			case Constants.FFH5_ENC_SVTAV1:
			case Constants.FFH5_ENC_RAV1E:
				return Constants.FFH5_DEC_DAV1D;
			case Constants.FFH5_ENC_AV1_NV:
				return Constants.FFH5_DEC_AV1_CUVID;
			case Constants.FFH5_ENC_AV1_QSV:
				return Constants.FFH5_DEC_AV1_QSV;
			default:
				return c_id;
		}
	}

    private int getPresetAndTuneOffset() {
        switch (encoderComboBox.getSelectedIndex()) {
            case Constants.FFH5_ENC_X264:
                return 10;
            case Constants.FFH5_ENC_H264_NV:
                return 100;
            case Constants.FFH5_ENC_X265:
                return 200;
            case Constants.FFH5_ENC_HEVC_NV:
                return 300;
            case Constants.FFH5_ENC_SVTAV1:
                return 400;
            case Constants.FFH5_ENC_RAV1E:
                return 500;
            case Constants.FFH5_ENC_AV1_NV:
                return 600;
            case Constants.FFH5_ENC_AV1_QSV:
                return 700;
            default:
                return 0;
        }
    }

    private int getIdFromIndex(int id) {
        return getPresetAndTuneOffset() + id;
    }

    private void selectFileButtonActionPerformed(java.awt.event.ActionEvent evt) {
        SaveDialog sd = new SaveDialog("Select new HDF5 file", "", ".h5");
		String directory = sd.getDirectory();
		String name = sd.getFileName();
		if (name == null)
			return;
		if (name == "")
			return;
		String filename = directory + name;
        selectedFile.setText(filename);
        selectedFilename = filename;
        compressButton.setEnabled(true);
    }

    private void encoderComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encoderComboBoxActionPerformed
        filmGrainPanel.setVisible(false);
        switch(encoderComboBox.getSelectedIndex()) {
            /* x264 and x265 */
            case Constants.FFH5_ENC_X264:
            case Constants.FFH5_ENC_X265:
                presetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ultrafast", "superfast", "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow" }));
                tuneComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "psnr", "ssim", "grain", "fastdecode", "zerolatency", "animation", "film", "stillimage" }));
                break;
            
            /* h264, hevc, av1_nvenc */
            case Constants.FFH5_ENC_H264_NV:
            case Constants.FFH5_ENC_HEVC_NV:
            case Constants.FFH5_ENC_AV1_NV:
                presetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "p1", "p2", "p3", "p4", "p5", "p6", "p7" }));
                tuneComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  "hq", "ul", "ull", "lossless" }));
                break;

            /* svtav1 and rav1e */
            case Constants.FFH5_ENC_SVTAV1:
                presetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" }));
                tuneComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  "tune=0", "tune=1", "fast-decode=1" }));
                filmGrainPanel.setVisible(true);
            case Constants.FFH5_ENC_RAV1E:
                presetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13" }));
                tuneComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  "tune=Psnr", "tune=Psychovisual" }));
                break;

            case Constants.FFH5_ENC_AV1_QSV:
                presetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "veryfast", "faster", "fast", "medium", "slow", "slower", "veryslow" }));
                tuneComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {  "unknown", "displayremoting", "videoconference", "archive", "livestreaming", "cameracapture", "videosurveillance", "gamestreaming", "remotegaming"}));
                break;

            default:
                presetComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { }));
        }
    }//GEN-LAST:event_encoderComboBoxActionPerformed

    private void presetComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_presetComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_presetComboBoxActionPerformed

    private void compressButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compressButtonActionPerformed
        int encoderId = encoderComboBox.getSelectedIndex();
		int decoderId = get_decoder_from_encoder(encoderId);
		int presetId = getIdFromIndex(presetComboBox.getSelectedIndex());
		int tuneType = getIdFromIndex(tuneComboBox.getSelectedIndex());
        int crf = 100 - qualitySlider.getValue();
        int filmGrain = filmGrainSlider.getValue();

        this.startTime = System.currentTimeMillis();

        statusPanel.setVisible(true);
        statusText.setText("Compressing...");
        cancelButton.setVisible(true);
        compressButton.setEnabled(false);

        CompressThread ct = new CompressThread(this, selectedFilename, encoderId, decoderId, presetId, tuneType, crf, filmGrain);
        currThread = new Thread(ct);
        currThread.start();
    }//GEN-LAST:event_compressButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        currThread.stop();
        currThread = null;
        statusPanel.setVisible(false);
        compressButton.setEnabled(true);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void qualitySliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_qualitySliderStateChanged
        qualityLabel.setText(String.valueOf(qualitySlider.getValue()));
    }//GEN-LAST:event_qualitySliderStateChanged

    private void filmGrainSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_filmGrainSliderStateChanged
        filmGrainLabel.setText(String.valueOf(filmGrainSlider.getValue()));
    }//GEN-LAST:event_filmGrainSliderStateChanged

    protected void updateProgress(int progress) {
        progressBar.setValue(progress);
    }

    protected void onCompressionComplete() {
        statusText.setText("Compression complete");
        IJ.log("Compression took " + (System.currentTimeMillis() - this.startTime) / 1000 + "s");
        progressBar.setValue(100);
        cancelButton.setVisible(false);
        compressButton.setEnabled(true);
    }

    protected void onCompressionError() {
        statusText.setText("Compression error");
        progressBar.setValue(0);
        cancelButton.setVisible(false);
        compressButton.setEnabled(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                // FlatLightLaf.setup();
                MainWindow mw = new MainWindow();
                mw.initComponents();
                mw.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton compressButton;
    private javax.swing.JComboBox<String> encoderComboBox;
    private javax.swing.JLabel filmGrainLabel;
    private javax.swing.JPanel filmGrainPanel;
    private javax.swing.JSlider filmGrainSlider;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> presetComboBox;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel qualityLabel;
    private javax.swing.JSlider qualitySlider;
    private javax.swing.JButton selectFileButton;
    private javax.swing.JLabel selectedFile;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JLabel statusText;
    private javax.swing.JComboBox<String> tuneComboBox;
    // End of variables declaration//GEN-END:variables

    @Override
    public int setup(String arg, ImagePlus imp) {
		return DOES_ALL;
    }

    @Override
    public void run(ImageProcessor ip) {
        MainWindow.main(null);
        // initComponents();
        // this.setVisible(true);
    }
}
