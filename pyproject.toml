[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "numpy>=1.15.0",
]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
build = ["cp311-*", "cp312-*"]
skip = ["*-musllinux*", "*-win32", "*-manylinux_i686"]
test-requires = "pytest numpy h5py"
test-command = "python -c 'import h5ffmpeg; print(\"Import successful\")'"

[tool.cibuildwheel.linux]
before-all = [
    """
    # Install Miniconda
    curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
    bash miniconda.sh -b -p /opt/miniconda
    export PATH="/opt/miniconda/bin:$PATH"
    
    # Update conda and add conda-forge channel
    /opt/miniconda/bin/conda config --add channels conda-forge
    /opt/miniconda/bin/conda config --set channel_priority strict
    /opt/miniconda/bin/conda update -y conda
    
    # Install HDF5 and core build tools
    /opt/miniconda/bin/conda install -y \
        hdf5 \
        hdf5-external-filter-plugins \
        pkg-config \
        gcc_linux-64 \
        gxx_linux-64 \
        cmake \
        ninja \
        meson \
        nasm \
        yasm \
        git \
        autoconf \
        automake \
        libtool \
        make \
        -c conda-forge
    
    # Install video codecs from conda-forge
    /opt/miniconda/bin/conda install -y \
        x264 \
        x265 \
        libaom \
        libvpx \
        dav1d \
        rav1e \
        svt-av1 \
        zlib \
        bzip2 \
        xz \
        lz4 \
        zstd \
        -c conda-forge
    
    # Install hardware acceleration libraries (where available)
    /opt/miniconda/bin/conda install -y \
        libva \
        libvdpau \
        libdrm \
        intel-media-sdk \
        oneapi-level-zero \
        -c conda-forge || echo "Some hardware acceleration libs not available"
    
    # Install network libraries (minimal for video streaming)
    /opt/miniconda/bin/conda install -y \
        openssl \
        -c conda-forge
    
    # Set up build environment
    export PKG_CONFIG_PATH="/opt/miniconda/lib/pkgconfig:$PKG_CONFIG_PATH"
    export LD_LIBRARY_PATH="/opt/miniconda/lib:$LD_LIBRARY_PATH"
    export CC=/opt/miniconda/bin/x86_64-conda-linux-gnu-gcc
    export CXX=/opt/miniconda/bin/x86_64-conda-linux-gnu-g++
    export CFLAGS="-I/opt/miniconda/include"
    export CXXFLAGS="-I/opt/miniconda/include"
    export LDFLAGS="-L/opt/miniconda/lib"
    
    # Create build directories
    mkdir -p /tmp/hwaccel_src /opt/ffmpeg/include /opt/ffmpeg/lib /opt/ffmpeg/lib/pkgconfig
    cd /tmp/hwaccel_src
    
    # Build Intel oneVPL (libvpl) for QSV support
    echo "Building Intel oneVPL for QSV support..."
    git clone --depth 1 https://github.com/oneapi-src/oneVPL.git
    cd oneVPL
    mkdir build && cd build
    cmake -G "Unix Makefiles" \
        -DCMAKE_INSTALL_PREFIX="/opt/ffmpeg" \
        -DBUILD_SHARED_LIBS=ON \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -DBUILD_TOOLS=OFF \
        -DBUILD_EXAMPLES=OFF \
        -DBUILD_TESTS=OFF \
        -DCMAKE_C_COMPILER=$CC \
        -DCMAKE_CXX_COMPILER=$CXX \
        ..
    make -j$(nproc)
    make install
    cd /tmp/hwaccel_src
    
    # Install NVIDIA headers (for NVENC/NVDEC support)
    echo "Installing NVIDIA codec headers..."
    git clone --depth 1 https://github.com/FFmpeg/nv-codec-headers.git
    cd nv-codec-headers
    make install PREFIX="/opt/ffmpeg"
    cd /tmp/hwaccel_src
    
    # Check if CUDA is available
    if command -v nvcc &> /dev/null; then
        CUDA_FLAGS="--enable-cuda-nvcc --enable-libnpp"
        echo "CUDA found - enabling full CUDA support"
    else
        CUDA_FLAGS="--enable-cuda-llvm"
        echo "CUDA not found - enabling basic CUDA support for compilation"
    fi
    
    # Build FFmpeg from source with video codec support
    echo "Building FFmpeg with video codec support..."
    git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git ffmpeg
    cd ffmpeg
    
    # Configure FFmpeg with video codecs
    ./configure \
        --prefix="/opt/ffmpeg" \
        --extra-cflags="-I/opt/miniconda/include -I/opt/ffmpeg/include" \
        --extra-ldflags="-L/opt/miniconda/lib -L/opt/ffmpeg/lib" \
        --extra-libs="-lm -lstdc++" \
        --pkg-config-flags="--static" \
        --enable-shared \
        --disable-static \
        --enable-pic \
        --enable-gpl \
        --enable-nonfree \
        --enable-version3 \
        --enable-pthreads \
        --enable-libx264 \
        --enable-libx265 \
        --enable-libaom \
        --enable-libdav1d \
        --enable-librav1e \
        --enable-libsvtav1 \
        --enable-libvpx \
        --enable-libvpl \
        --enable-vaapi \
        --enable-vdpau \
        --enable-libdrm \
        ${CUDA_FLAGS} \
        --enable-openssl \
        --enable-lzma \
        --enable-bzlib \
        --enable-zlib \
        --enable-libzstd \
        --enable-runtime-cpudetect \
        --enable-hardcoded-tables \
        --enable-optimizations \
        --disable-doc \
        --disable-ffplay \
        --disable-debug
    
    make -j$(nproc)
    make install
    
    # Verify the build
    echo "Verifying FFmpeg build..."
    /opt/ffmpeg/bin/ffmpeg -version
    
    echo "Checking video codec support:"
    /opt/ffmpeg/bin/ffmpeg -encoders | grep -E "(libx264|libx265|libaom|librav1e|libsvtav1|libvpx)" || echo "Some video encoders missing"
    /opt/ffmpeg/bin/ffmpeg -decoders | grep -E "(h264|hevc|av1|vp9)" || echo "Some video decoders missing"
    
    echo "Hardware acceleration support:"
    /opt/ffmpeg/bin/ffmpeg -encoders | grep -E "(qsv|nvenc|vaapi)" || echo "Hardware encoders not available (expected in CI)"
    /opt/ffmpeg/bin/ffmpeg -decoders | grep -E "(qsv|cuvid|vaapi)" || echo "Hardware decoders not available (expected in CI)"
    
    echo "FFmpeg build with comprehensive video codec support completed"
    """
]

[tool.cibuildwheel.linux.environment]
FFMPEG_ROOT = "/opt/ffmpeg"
HDF5_ROOT = "/opt/miniconda"
PKG_CONFIG_PATH = "/opt/ffmpeg/lib/pkgconfig:/opt/miniconda/lib/pkgconfig"
LD_LIBRARY_PATH = "/opt/ffmpeg/lib:/opt/miniconda/lib:$LD_LIBRARY_PATH"
PATH = "/opt/ffmpeg/bin:/opt/miniconda/bin:$PATH"
CPPFLAGS = "-I/opt/miniconda/include -I/opt/ffmpeg/include"
LDFLAGS = "-L/opt/miniconda/lib -L/opt/ffmpeg/lib"

repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
before-all = [
    """
    # Install Miniconda for macOS
    curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o miniconda.sh
    bash miniconda.sh -b -p $HOME/miniconda
    export PATH="$HOME/miniconda/bin:$PATH"
    
    # Update conda and add conda-forge channel
    $HOME/miniconda/bin/conda config --add channels conda-forge
    $HOME/miniconda/bin/conda config --set channel_priority strict
    $HOME/miniconda/bin/conda update -y conda
    
    # Install HDF5 and core build tools
    $HOME/miniconda/bin/conda install -y \
        hdf5 \
        hdf5-external-filter-plugins \
        pkg-config \
        clang_osx-arm64 \
        clangxx_osx-arm64 \
        cmake \
        ninja \
        meson \
        nasm \
        yasm \
        git \
        autoconf \
        automake \
        libtool \
        make \
        -c conda-forge
    
    # Install video codecs from conda-forge
    $HOME/miniconda/bin/conda install -y \
        x264 \
        x265 \
        libaom \
        libvpx \
        dav1d \
        rav1e \
        svt-av1 \
        zlib \
        bzip2 \
        xz \
        lz4 \
        zstd \
        -c conda-forge
    
    # Install minimal network libraries
    $HOME/miniconda/bin/conda install -y \
        openssl \
        -c conda-forge
    
    # Set up build environment
    export PKG_CONFIG_PATH="$HOME/miniconda/lib/pkgconfig:$PKG_CONFIG_PATH"
    export DYLD_LIBRARY_PATH="$HOME/miniconda/lib:$DYLD_LIBRARY_PATH"
    export CC=$HOME/miniconda/bin/clang
    export CXX=$HOME/miniconda/bin/clang++
    export CFLAGS="-I$HOME/miniconda/include"
    export CXXFLAGS="-I$HOME/miniconda/include"
    export LDFLAGS="-L$HOME/miniconda/lib"
    export MACOSX_DEPLOYMENT_TARGET="14.0"
    export ARCHFLAGS="-arch arm64"
    
    # Create build directories
    mkdir -p /tmp/hwaccel_src $HOME/ffmpeg/include $HOME/ffmpeg/lib $HOME/ffmpeg/lib/pkgconfig
    cd /tmp/hwaccel_src
    
    # Install Apple VideoToolbox headers (built-in, just verify)
    echo "VideoToolbox support will be automatically detected..."
    
    # Build Intel oneVPL for potential Intel Mac support
    echo "Building Intel oneVPL..."
    git clone --depth 1 https://github.com/oneapi-src/oneVPL.git
    cd oneVPL
    mkdir build && cd build
    cmake -G "Unix Makefiles" \
        -DCMAKE_INSTALL_PREFIX="$HOME/ffmpeg" \
        -DBUILD_SHARED_LIBS=ON \
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
        -DBUILD_TOOLS=OFF \
        -DBUILD_EXAMPLES=OFF \
        -DBUILD_TESTS=OFF \
        -DCMAKE_C_COMPILER=$CC \
        -DCMAKE_CXX_COMPILER=$CXX \
        -DCMAKE_OSX_ARCHITECTURES=arm64 \
        -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 \
        ..
    make -j$(sysctl -n hw.ncpu)
    make install
    cd /tmp/hwaccel_src
    
    # Build FFmpeg from source with video codec support
    echo "Building FFmpeg with video codec support..."
    git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git ffmpeg
    cd ffmpeg
    
    # Configure FFmpeg with video codecs
    ./configure \
        --prefix="$HOME/ffmpeg" \
        --extra-cflags="-I$HOME/miniconda/include -I$HOME/ffmpeg/include" \
        --extra-ldflags="-L$HOME/miniconda/lib -L$HOME/ffmpeg/lib" \
        --extra-libs="-lm -lstdc++" \
        --pkg-config-flags="--static" \
        --enable-shared \
        --disable-static \
        --enable-pic \
        --enable-gpl \
        --enable-nonfree \
        --enable-version3 \
        --enable-pthreads \
        --enable-libx264 \
        --enable-libx265 \
        --enable-libaom \
        --enable-libdav1d \
        --enable-librav1e \
        --enable-libsvtav1 \
        --enable-libvpx \
        --enable-libvpl \
        --enable-videotoolbox \
        --enable-audiotoolbox \
        --enable-openssl \
        --enable-lzma \
        --enable-bzlib \
        --enable-zlib \
        --enable-libzstd \
        --enable-runtime-cpudetect \
        --enable-hardcoded-tables \
        --enable-optimizations \
        --disable-doc \
        --disable-ffplay \
        --disable-debug \
        --cc=$CC \
        --cxx=$CXX
    
    make -j$(sysctl -n hw.ncpu)
    make install
    
    # Verify the build
    echo "Verifying FFmpeg build..."
    $HOME/ffmpeg/bin/ffmpeg -version
    
    echo "Checking video codec support:"
    $HOME/ffmpeg/bin/ffmpeg -encoders | grep -E "(libx264|libx265|libaom|librav1e|libsvtav1|libvpx)" || echo "Some video encoders missing"
    $HOME/ffmpeg/bin/ffmpeg -decoders | grep -E "(h264|hevc|av1|vp9)" || echo "Some video decoders missing"
    
    echo "Hardware acceleration support:"
    $HOME/ffmpeg/bin/ffmpeg -encoders | grep -E "(videotoolbox)" || echo "VideoToolbox encoder not available"
    
    echo "FFmpeg build with video codec support completed"
    """
]

[tool.cibuildwheel.macos.environment]
FFMPEG_ROOT = "$HOME/ffmpeg"
HDF5_ROOT = "$HOME/miniconda"
PKG_CONFIG_PATH = "$HOME/ffmpeg/lib/pkgconfig:$HOME/miniconda/lib/pkgconfig"
DYLD_LIBRARY_PATH = "$HOME/ffmpeg/lib:$HOME/miniconda/lib:$DYLD_LIBRARY_PATH"
PATH = "$HOME/ffmpeg/bin:$HOME/miniconda/bin:$PATH"
MACOSX_DEPLOYMENT_TARGET = "14.0"
ARCHFLAGS = "-arch arm64"
CPPFLAGS = "-I$HOME/miniconda/include -I$HOME/ffmpeg/include"
LDFLAGS = "-L$HOME/miniconda/lib -L$HOME/ffmpeg/lib -Wl,-headerpad_max_install_names"

repair-wheel-command = [
    "DYLD_LIBRARY_PATH=$HOME/ffmpeg/lib:$HOME/miniconda/lib delocate-listdeps {wheel}",
    "DYLD_LIBRARY_PATH=$HOME/ffmpeg/lib:$HOME/miniconda/lib delocate-wheel --require-archs arm64 -w {dest_dir} {wheel}"
]

[tool.cibuildwheel.windows]
before-all = [
    """
    # Install Miniconda for Windows
    curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -o miniforge.exe
    start /wait "" miniforge.exe /InstallationType=JustMe /RegisterPython=0 /S /D=C:\\Miniforge3
    set PATH=C:\\Miniforge3;C:\\Miniforge3\\Scripts;C:\\Miniforge3\\Library\\bin;%PATH%
    
    # Update conda and add conda-forge channel
    C:\\Miniforge3\\Scripts\\conda.exe config --add channels conda-forge
    C:\\Miniforge3\\Scripts\\conda.exe config --set channel_priority strict
    C:\\Miniforge3\\Scripts\\conda.exe update -y conda
    
    # Install HDF5 and core build tools
    C:\\Miniforge3\\Scripts\\conda.exe install -y ^
        hdf5 ^
        hdf5-external-filter-plugins ^
        pkg-config ^
        cmake ^
        ninja ^
        nasm ^
        yasm ^
        git ^
        msys2-conda-epoch ^
        m2-base ^
        m2-autoconf ^
        m2-automake ^
        m2-libtool ^
        m2-make ^
        -c conda-forge
    
    # Install video codecs from conda-forge
    C:\\Miniforge3\\Scripts\\conda.exe install -y ^
        x264 ^
        x265 ^
        libaom ^
        libvpx ^
        dav1d ^
        rav1e ^
        svt-av1 ^
        zlib ^
        bzip2 ^
        xz ^
        lz4 ^
        zstd ^
        -c conda-forge
    
    # Install minimal network libraries
    C:\\Miniforge3\\Scripts\\conda.exe install -y ^
        openssl ^
        -c conda-forge
    
    # Install Visual Studio build tools
    C:\\Miniforge3\\Scripts\\conda.exe install -y ^
        vs2019_win-64 ^
        -c conda-forge
    
    # Create build directories
    mkdir C:\\ffmpeg_build\\bin 2>nul
    mkdir C:\\ffmpeg_build\\lib 2>nul  
    mkdir C:\\ffmpeg_build\\include 2>nul
    mkdir C:\\temp_build 2>nul
    
    # Set up build environment
    set PKG_CONFIG_PATH=C:\\Miniforge3\\Library\\lib\\pkgconfig
    set PATH=C:\\Miniforge3\\Library\\bin;C:\\Miniforge3\\bin;%PATH%
    set INCLUDE=C:\\Miniforge3\\Library\\include;%INCLUDE%
    set LIB=C:\\Miniforge3\\Library\\lib;%LIB%
    
    cd C:\\temp_build
    
    # Build Intel oneVPL for QSV support
    echo Building Intel oneVPL for QSV support...
    git clone --depth 1 https://github.com/oneapi-src/oneVPL.git
    cd oneVPL
    mkdir build && cd build
    cmake -G "Visual Studio 16 2019" -A x64 ^
        -DCMAKE_INSTALL_PREFIX="C:\\ffmpeg_build" ^
        -DBUILD_SHARED_LIBS=ON ^
        -DCMAKE_POSITION_INDEPENDENT_CODE=ON ^
        -DBUILD_TOOLS=OFF ^
        -DBUILD_EXAMPLES=OFF ^
        -DBUILD_TESTS=OFF ^
        ..
    cmake --build . --config Release -j 4
    cmake --install . --config Release
    cd C:\\temp_build
    
    # Install NVIDIA headers
    echo Installing NVIDIA codec headers...
    git clone --depth 1 https://github.com/FFmpeg/nv-codec-headers.git
    cd nv-codec-headers
    make install PREFIX="C:\\ffmpeg_build"
    cd C:\\temp_build
    
    # Build FFmpeg from source
    echo Building FFmpeg with video codec support...
    git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git ffmpeg
    cd ffmpeg
    
    # Use MSYS2 environment for FFmpeg build
    C:\\Miniforge3\\Library\\usr\\bin\\bash.exe -c "
    export PATH='/c/Miniforge3/Library/bin:/c/ffmpeg_build/bin:$PATH'
    export PKG_CONFIG_PATH='/c/Miniforge3/Library/lib/pkgconfig:/c/ffmpeg_build/lib/pkgconfig'
    export CFLAGS='-I/c/Miniforge3/Library/include -I/c/ffmpeg_build/include'
    export LDFLAGS='-L/c/Miniforge3/Library/lib -L/c/ffmpeg_build/lib'
    
    ./configure \
        --prefix='/c/ffmpeg_build' \
        --enable-shared \
        --disable-static \
        --enable-pic \
        --enable-gpl \
        --enable-nonfree \
        --enable-version3 \
        --enable-libx264 \
        --enable-libx265 \
        --enable-libaom \
        --enable-libdav1d \
        --enable-librav1e \
        --enable-libsvtav1 \
        --enable-libvpx \
        --enable-libvpl \
        --enable-nvenc \
        --enable-nvdec \
        --enable-d3d11va \
        --enable-dxva2 \
        --enable-openssl \
        --enable-lzma \
        --enable-bzlib \
        --enable-zlib \
        --enable-libzstd \
        --enable-runtime-cpudetect \
        --enable-hardcoded-tables \
        --enable-optimizations \
        --disable-doc \
        --disable-ffplay \
        --disable-debug \
        --toolchain=msvc
    
    make -j 4
    make install
    "
    
    # Verify the build
    echo Verifying FFmpeg build...
    if exist "C:\\ffmpeg_build\\bin\\ffmpeg.exe" (
        echo SUCCESS: FFmpeg executable found
        C:\\ffmpeg_build\\bin\\ffmpeg.exe -version 2>nul | findstr /C:"ffmpeg version"
        
        echo Checking video codec support:
        C:\\ffmpeg_build\\bin\\ffmpeg.exe -encoders | findstr /C:"libx264 libx265 libaom librav1e libsvtav1 libvpx" 2>nul
        C:\\ffmpeg_build\\bin\\ffmpeg.exe -decoders | findstr /C:"h264 hevc av1 vp9" 2>nul
        
    ) else (
        echo ERROR: FFmpeg executable not found
        exit /b 1
    )
    
    if exist "C:\\Miniforge3\\Library\\include\\hdf5.h" (
        echo SUCCESS: HDF5 headers found
    ) else (
        echo ERROR: HDF5 headers not found
        exit /b 1
    )
    
    echo FFmpeg build with video codec support completed!
    """
]

[tool.cibuildwheel.windows.environment]
FFMPEG_ROOT = "C:/ffmpeg_build"
HDF5_ROOT = "C:/Miniforge3/Library"
PKG_CONFIG_PATH = "C:/ffmpeg_build/lib/pkgconfig;C:/Miniforge3/Library/lib/pkgconfig"
PATH = "C:/ffmpeg_build/bin;C:/Miniforge3/Library/bin;C:/Miniforge3/bin;$PATH"
INCLUDE = "C:/ffmpeg_build/include;C:/Miniforge3/Library/include;$INCLUDE"
LIB = "C:/ffmpeg_build/lib;C:/Miniforge3/Library/lib;$LIB"

repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel} --add-path C:/ffmpeg_build/bin;C:/Miniforge3/Library/bin"