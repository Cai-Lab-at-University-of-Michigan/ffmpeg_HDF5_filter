[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "numpy>=1.15.0",
]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
build = ["cp311-*", "cp312-*"]
skip = ["*-musllinux*", "*-win32", "*-manylinux_i686"]
test-requires = "pytest numpy h5py"
test-command = "python -c 'import h5ffmpeg; print(\"Import successful\")'"

[tool.cibuildwheel.linux]
archs = ["x86_64"]
manylinux-x86_64-image = "manylinux_2_28"

before-all = [
    """
    yum update -y || (apt-get update && apt-get upgrade -y)
    yum groupinstall -y "Development Tools" || apt-get install -y build-essential
    yum install -y epel-release cmake nasm yasm pkg-config zlib-devel bzip2-devel xz-devel openssl-devel git wget which || apt-get install -y cmake nasm yasm pkg-config libz-dev libbz2-dev liblzma-dev libssl-dev git wget
    
    curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
    bash miniconda.sh -b -p /opt/miniconda
    
    /opt/miniconda/bin/conda config --add channels conda-forge
    /opt/miniconda/bin/conda config --set channel_priority strict
    /opt/miniconda/bin/conda update -y conda
    
    /opt/miniconda/bin/conda install -y hdf5 hdf5-external-filter-plugins pkg-config cmake ninja meson nasm yasm git wget autoconf automake libtool make -c conda-forge
    /opt/miniconda/bin/conda install -y x264 x265 aom libvpx dav1d rav1e svt-av1 zlib bzip2 xz lz4 zstd -c conda-forge
    /opt/miniconda/bin/conda install -y libva libdrm libvpl -c conda-forge || echo "Hardware acceleration libs not available"
    /opt/miniconda/bin/conda install -y openssl -c conda-forge

    pip install nvidia-cuda-nvcc || echo "CUDA libs not available"
    
    export PATH="/opt/miniconda/bin:$PATH"
    export PKG_CONFIG_PATH="/opt/miniconda/lib/pkgconfig:/opt/miniconda/share/pkgconfig"
    export LD_LIBRARY_PATH="/opt/miniconda/lib"
    export CC=gcc
    export CXX=g++
    export CFLAGS="-I/opt/miniconda/include -fPIC"
    export CXXFLAGS="-I/opt/miniconda/include -fPIC"
    export LDFLAGS="-L/opt/miniconda/lib"
    
    mkdir -p /tmp/hwaccel_src /opt/ffmpeg/include /opt/ffmpeg/lib /opt/ffmpeg/lib/pkgconfig
    cd /tmp/hwaccel_src
    
    echo "Cloning nv-codec-headers..."
    git clone --depth 1 https://github.com/FFmpeg/nv-codec-headers.git
    cd nv-codec-headers
    make install PREFIX="/opt/ffmpeg"
    cd /tmp/hwaccel_src
    
    echo "Cloning oneVPL..."
    git clone --depth 1 https://github.com/intel/libvpl.git
    cd oneVPL
    mkdir build && cd build
    cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX="/opt/ffmpeg" -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX ..
    make -j$(nproc)
    make install
    cd /tmp/hwaccel_src
    
    export PKG_CONFIG_PATH="/opt/ffmpeg/lib/pkgconfig:/opt/miniconda/lib/pkgconfig:/opt/miniconda/share/pkgconfig"
    
    if [ ! -f "/opt/miniconda/lib/pkgconfig/dav1d.pc" ]; then
        echo "Building dav1d from source..."
        git clone --depth 1 https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        meson setup build --prefix=/opt/miniconda --libdir=lib
        ninja -C build
        ninja -C build install
        cd /tmp/hwaccel_src
    fi
    
    echo "Cloning FFmpeg..."
    git config --global http.postBuffer 524288000
    git config --global http.maxRequestBuffer 100M
    git config --global core.compression 0
    
    if ! git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git ffmpeg; then
        echo "Shallow clone failed, trying full clone..."
        git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg
    fi
    
    cd ffmpeg
    
    if command -v nvcc &> /dev/null; then
        CUDA_FLAGS="--enable-cuda-nvcc --enable-libnpp"
    else
        CUDA_FLAGS=""
    fi
    
    echo "Configuring FFmpeg..."
    ./configure --prefix="/opt/ffmpeg" --extra-cflags="-I/opt/miniconda/include -I/opt/ffmpeg/include -fPIC" --extra-ldflags="-L/opt/miniconda/lib -L/opt/ffmpeg/lib" --extra-libs="-lm -lstdc++" --enable-shared --disable-static --enable-pic --enable-gpl --enable-nonfree --enable-version3 --enable-pthreads --enable-libx264 --enable-libx265 --enable-libaom --enable-libdav1d --enable-librav1e --enable-libsvtav1 --enable-libvpx --enable-libvpl ${CUDA_FLAGS} --enable-openssl --enable-lzma --enable-bzlib --enable-zlib --enable-runtime-cpudetect --enable-hardcoded-tables --enable-optimizations --disable-doc --disable-ffplay --disable-debug
    
    echo "Building FFmpeg..."
    make -j$(nproc)
    make install
    
    echo "/opt/ffmpeg/lib" > /etc/ld.so.conf.d/ffmpeg.conf
    echo "/opt/miniconda/lib" >> /etc/ld.so.conf.d/ffmpeg.conf
    ldconfig
    
    export LD_LIBRARY_PATH="/opt/ffmpeg/lib:/opt/miniconda/lib:$LD_LIBRARY_PATH"
    
    echo "Verifying FFmpeg installation..."
    /opt/ffmpeg/bin/ffmpeg -version
    """
]

[tool.cibuildwheel.linux.environment]
FFMPEG_ROOT = "/opt/ffmpeg"
HDF5_ROOT = "/opt/miniconda"
PKG_CONFIG_PATH = "/opt/ffmpeg/lib/pkgconfig:/opt/miniconda/lib/pkgconfig:/opt/miniconda/share/pkgconfig"
LD_LIBRARY_PATH = "/opt/ffmpeg/lib:/opt/miniconda/lib"
CPPFLAGS = "-I/opt/miniconda/include -I/opt/ffmpeg/include"
LDFLAGS = "-L/opt/miniconda/lib -L/opt/ffmpeg/lib"

[tool.cibuildwheel.macos]
before-all = [
    """
    curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o miniconda.sh
    bash miniconda.sh -b -p $HOME/miniconda
    
    $HOME/miniconda/bin/conda config --add channels conda-forge
    $HOME/miniconda/bin/conda config --set channel_priority strict
    $HOME/miniconda/bin/conda update -y conda
    
    $HOME/miniconda/bin/conda install -y hdf5 hdf5-external-filter-plugins pkg-config cmake ninja meson nasm yasm git autoconf automake libtool make -c conda-forge
    $HOME/miniconda/bin/conda install -y x264 x265 aom libvpx dav1d rav1e svt-av1 zlib bzip2 xz lz4 zstd -c conda-forge
    $HOME/miniconda/bin/conda install -y openssl -c conda-forge
    
    export PATH="$HOME/miniconda/bin:$PATH"
    export PKG_CONFIG_PATH="$HOME/miniconda/lib/pkgconfig:$HOME/ffmpeg/lib"
    export DYLD_LIBRARY_PATH="$HOME/miniconda/lib"
    export CFLAGS="-I$HOME/miniconda/include"
    export CXXFLAGS="-I$HOME/miniconda/include"
    export LDFLAGS="-L$HOME/miniconda/lib"
    export MACOSX_DEPLOYMENT_TARGET="12.0"
    export ARCHFLAGS="-arch arm64"
    
    mkdir -p /tmp/hwaccel_src $HOME/ffmpeg/include $HOME/ffmpeg/lib $HOME/ffmpeg/lib/pkgconfig
    cd /tmp/hwaccel_src

    if [ ! -f "$HOME/miniconda/lib/pkgconfig/dav1d.pc" ]; then
        echo "Building dav1d from source..."
        git clone --depth 1 https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        meson setup build --prefix=$HOME/ffmpeg --libdir=lib
        ninja -C build
        ninja -C build install
        cd /tmp/hwaccel_src
    fi
    
    git config --global http.postBuffer 524288000
    git config --global http.maxRequestBuffer 100M
    git config --global core.compression 0
    git config --global http.lowSpeedLimit 0
    git config --global http.lowSpeedTime 999999
    
    echo "Cloning FFmpeg..."
    RETRY_COUNT=0
    MAX_RETRIES=3
    
    while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
        if git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git ffmpeg; then
            echo "FFmpeg clone successful"
            break
        else
            RETRY_COUNT=$((RETRY_COUNT + 1))
            echo "FFmpeg clone failed, attempt $RETRY_COUNT/$MAX_RETRIES"
            rm -rf ffmpeg
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "Trying full clone as last resort..."
                if git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg; then
                    echo "Full clone successful"
                    break
                else
                    echo "All clone attempts failed"
                    exit 1
                fi
            fi
            
            sleep 5
        fi
    done
    
    cd ffmpeg
    
    if [ ! -f "configure" ]; then
        echo "ERROR: configure script not found"
        ls -la
        exit 1
    fi
    
    echo "Configuring FFmpeg..."
    ./configure \
        --prefix="$HOME/ffmpeg" \
        --extra-cflags="-I$HOME/miniconda/include -I$HOME/ffmpeg/include" \
        --extra-ldflags="-L$HOME/miniconda/lib -L$HOME/ffmpeg/lib" \
        --extra-libs="-lm -lstdc++" \
        --pkg-config-flags="--static" \
        --enable-shared \
        --disable-static \
        --enable-pic \
        --enable-gpl \
        --enable-nonfree \
        --enable-version3 \
        --enable-pthreads \
        --enable-libx264 \
        --enable-libx265 \
        --enable-libaom \
        --enable-libdav1d \
        --enable-librav1e \
        --enable-libsvtav1 \
        --enable-libvpx \
        --enable-videotoolbox \
        --enable-audiotoolbox \
        --enable-openssl \
        --enable-lzma \
        --enable-bzlib \
        --enable-zlib \
        --enable-runtime-cpudetect \
        --enable-hardcoded-tables \
        --enable-optimizations \
        --disable-doc \
        --disable-ffplay \
        --disable-debug \
        --cc="$CC" \
        --cxx="$CXX"
    
    echo "Building FFmpeg..."
    make -j$(sysctl -n hw.ncpu)
    make install
    
    echo "Verifying FFmpeg installation..."
    $HOME/ffmpeg/bin/ffmpeg -version
    """
]

[tool.cibuildwheel.macos.environment]
FFMPEG_ROOT = "$HOME/ffmpeg"
HDF5_ROOT = "$HOME/miniconda"
CC = "/usr/bin/clang"
CXX = "/usr/bin/clang++"
PKG_CONFIG_PATH = "$HOME/ffmpeg/lib/pkgconfig:$HOME/miniconda/lib/pkgconfig"
DYLD_LIBRARY_PATH = "$HOME/ffmpeg/lib:$HOME/miniconda/lib"
MACOSX_DEPLOYMENT_TARGET = "12.0"
ARCHFLAGS = "-arch arm64"
CFLAGS = "-I$HOME/miniconda/include -I$HOME/ffmpeg/include -fno-lto"
CXXFLAGS = "-I$HOME/miniconda/include -I$HOME/ffmpeg/include -fno-lto"
LDFLAGS = "-L$HOME/miniconda/lib -L$HOME/ffmpeg/lib -Wl,-headerpad_max_install_names -fno-lto"

repair-wheel-command = [
    "DYLD_LIBRARY_PATH=$HOME/ffmpeg/lib:$HOME/miniconda/lib delocate-listdeps {wheel}",
    "DYLD_LIBRARY_PATH=$HOME/ffmpeg/lib:$HOME/miniconda/lib delocate-wheel --require-archs arm64 -w {dest_dir} {wheel}"
]

[tool.cibuildwheel.windows]
before-all = [
    """
    curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -o miniconda.exe
    start /wait "" miniconda.exe /InstallationType=JustMe /RegisterPython=0 /S /D=%FFMPEG_ROOT%miniconda3
    
    %FFMPEG_ROOT%miniconda3/Scripts/conda.exe config --add channels conda-forge
    %FFMPEG_ROOT%miniconda3/Scripts/conda.exe config --add channels nvidia
    %FFMPEG_ROOT%miniconda3/Scripts/conda.exe config --set channel_priority strict
    %FFMPEG_ROOT%miniconda3/Scripts/conda.exe update -y conda
    
    %FFMPEG_ROOT%miniconda3/Scripts/conda.exe install -y hdf5 hdf5-external-filter-plugins pkg-config cmake ninja nasm yasm git msys2-conda-epoch m2-base m2-autoconf m2-automake m2-libtool m2-make -c conda-forge
    %FFMPEG_ROOT%miniconda3/Scripts/conda.exe install -y wget x264 x265 libaom libvpx dav1d rav1e svt-av1 zlib bzip2 xz lz4 zstd -c conda-forge
    %FFMPEG_ROOT%miniconda3/Scripts/conda.exe install -y openssl -c conda-forge
    %FFMPEG_ROOT%miniconda3/Scripts/conda.exe install -y vs2019_win-64 -c conda-forge
    pip install nvidia-cuda-nvcc || echo "CUDA libs not available"
    
    mkdir %FFMPEG_ROOT%ffmpeg_build %FFMPEG_ROOT%ffmpeg_build/bin %FFMPEG_ROOT%ffmpeg_build/lib %FFMPEG_ROOT%ffmpeg_build/include %FFMPEG_ROOT%temp_build 2>nul
    if not exist "%FFMPEG_ROOT%ffmpeg_build" (
        echo ERROR: ffmpeg_build directory was not created
        exit /b 1
    )

    if not exist "%FFMPEG_ROOT%ffmpeg_build/lib" (
        echo ERROR: ffmpeg_build/lib directory missing
        exit /b 1
    )

    if not exist "%FFMPEG_ROOT%ffmpeg_build/include" (
        echo ERROR: ffmpeg_build/include directory missing  
        exit /b 1
    )

    if not exist "%FFMPEG_ROOT%temp_build" (
        echo ERROR: ffmpeg_build/include directory missing  
        exit /b 1
    )
    
    echo "Current working directory: %CD%"
    echo "Setting up environment variables..."
    
    set PKG_CONFIG_PATH=%FFMPEG_ROOT%miniconda3/Library/lib/pkgconfig
    set INCLUDE=%FFMPEG_ROOT%miniconda3/Library/include;%INCLUDE%
    set LIB=%FFMPEG_ROOT%miniconda3/Library/lib;%LIB%
    set PATH=%FFMPEG_ROOT%ffmpeg_build/bin;%FFMPEG_ROOT%miniconda3/Library/bin;%FFMPEG_ROOT%miniconda3/Scripts;%PATH%
    
    cd %FFMPEG_ROOT%temp_build
    
    git config --global http.postBuffer 524288000
    git config --global http.maxRequestBuffer 100M
    git config --global core.compression 0
    
    git clone --depth 1 https://github.com/FFmpeg/nv-codec-headers.git
    cd nv-codec-headers
    make install PREFIX="%FFMPEG_ROOT%ffmpeg_build"
    cd %FFMPEG_ROOT%temp_build
    
    git clone --depth 1 --branch v2.13.0 https://github.com/oneapi-src/oneVPL.git
    cd oneVPL
    mkdir build && cd build
    cmake -G "Visual Studio 16 2019" -A x64 -DCMAKE_INSTALL_PREFIX="%FFMPEG_ROOT%ffmpeg_build" -DBUILD_SHARED_LIBS=ON -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DBUILD_TOOLS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF ..
    cmake --build . --config Release -j 4
    cmake --install . --config Release
    cd %FFMPEG_ROOT%temp_build
    
    echo "Cloning FFmpeg..."
    if not git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git ffmpeg (
        echo "Shallow clone failed, trying full clone..."
        git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg
    )
    
    cd ffmpeg
    
    if not exist "configure" (
        echo "ERROR: configure script not found"
        dir
        exit /b 1
    )
    
    %FFMPEG_ROOT%miniconda3/Library/usr/bin/bash.exe -c "
    export PATH='/c/miniconda3/Library/bin:/d/a/ffmpeg_build/bin'
    export PKG_CONFIG_PATH='/c/miniconda3/Library/lib/pkgconfig:/d/a/ffmpeg_build/lib/pkgconfig'
    export CFLAGS='-I/c/miniconda3/Library/include -I/d/a/ffmpeg_build/include'
    export LDFLAGS='-L/c/miniconda3/Library/lib -L/d/a/ffmpeg_build/lib'
    
    echo 'Configuring FFmpeg...'
    ./configure --prefix='/d/a/ffmpeg_build' --enable-shared --disable-static --enable-pic --enable-gpl --enable-nonfree --enable-version3 --enable-libx264 --enable-libx265 --enable-libaom --enable-libdav1d --enable-librav1e --enable-libsvtav1 --enable-libvpx --enable-libvpl --enable-cuda-nvcc --enable-libnpp --enable-openssl --enable-lzma --enable-bzlib --enable-zlib --enable-runtime-cpudetect --enable-hardcoded-tables --enable-optimizations --disable-doc --disable-ffplay --disable-debug --toolchain=msvc
    
    echo 'Building FFmpeg...'
    make -j 4
    make install
    "
    
    if exist "%FFMPEG_ROOT%ffmpeg_build/bin/ffmpeg.exe" (
        echo SUCCESS: FFmpeg executable found
        %FFMPEG_ROOT%ffmpeg_build/bin/ffmpeg.exe -version 2>nul | findstr /C:"ffmpeg version"
        dir %FFMPEG_ROOT%ffmpeg_build/lib | findstr /C:".lib .dll" 2>nul
        echo FFmpeg build completed successfully
    ) else (
        echo ERROR: FFmpeg executable not found
        echo Contents of %FFMPEG_ROOT%ffmpeg_build:
        dir %FFMPEG_ROOT%ffmpeg_build 2>nul
        echo Contents of %FFMPEG_ROOT%ffmpeg_build/bin:
        dir %FFMPEG_ROOT%ffmpeg_build/bin 2>nul
        exit /b 1
    )
    """
]

[tool.cibuildwheel.windows.environment]
FFMPEG_ROOT = "D:/a/ffmpeg_HDF5_filter/ffmpeg_build"
HDF5_ROOT = "D:/a/ffmpeg_HDF5_filter/miniconda3/Library"
PKG_CONFIG_PATH = "D:/a/ffmpeg_HDF5_filter/ffmpeg_build/lib/pkgconfig;D:/a/ffmpeg_HDF5_filter/miniconda3/Library/lib/pkgconfig"
INCLUDE = "D:/a/ffmpeg_HDF5_filter/ffmpeg_build/include;D:/a/ffmpeg_HDF5_filter/miniconda3/Library/include"
LIB = "D:/a/ffmpeg_HDF5_filter/ffmpeg_build/lib;D:/a/ffmpeg_HDF5_filter/miniconda3/Library/lib"

repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel} --add-path D:/a/ffmpeg_HDF5_filter/ffmpeg_build/bin;D:/a/ffmpeg_HDF5_filter/miniconda3/Library/bin"