[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "numpy>=1.15.0",
]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
build = ["cp311-*", "cp312-*"]
skip = [
    "*-musllinux*", 
    "*-win32", 
    "*-manylinux_i686",
    "*-macosx_x86_64"
]
test-requires = "pytest numpy h5py"
test-command = "python -c 'import h5ffmpeg; print(\"Import successful\")'"

[tool.cibuildwheel.linux]
manylinux-x86_64-image = "dockcross/manylinux_2_34-x64"

before-all = [
    """
    yum update -y || (apt-get update && apt-get upgrade -y)
    yum groupinstall -y "Development Tools" || apt-get install -y build-essential
    yum install -y epel-release cmake nasm yasm pkg-config zlib-devel bzip2-devel xz-devel openssl-devel git wget which || apt-get install -y cmake nasm yasm pkg-config libz-dev libbz2-dev liblzma-dev libssl-dev git wget
    
    curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
    bash miniconda.sh -b -p /opt/miniconda
    
    /opt/miniconda/bin/conda config --add channels conda-forge
    /opt/miniconda/bin/conda config --set channel_priority strict
    /opt/miniconda/bin/conda update -y conda
    
    /opt/miniconda/bin/conda install -y hdf5 hdf5-external-filter-plugins pkg-config cmake ninja meson nasm yasm git wget autoconf automake libtool make -c conda-forge
    /opt/miniconda/bin/conda install -y x264 x265 aom libvpx dav1d rav1e svt-av1 zlib bzip2 xz lz4 zstd -c conda-forge
    /opt/miniconda/bin/conda install -y libva libdrm libvpl -c conda-forge || echo "Hardware acceleration libs not available"
    /opt/miniconda/bin/conda install -y openssl -c conda-forge

    pip install nvidia-cuda-nvcc
    
    export PATH="/opt/miniconda/bin:$PATH"
    export PKG_CONFIG_PATH="/opt/miniconda/lib/pkgconfig:/opt/miniconda/share/pkgconfig"
    export LD_LIBRARY_PATH="/opt/miniconda/lib"
    export CC=gcc
    export CXX=g++
    export CFLAGS="-I/opt/miniconda/include -fPIC"
    export CXXFLAGS="-I/opt/miniconda/include -fPIC"
    export LDFLAGS="-L/opt/miniconda/lib"
    
    mkdir -p /tmp/hwaccel_src /opt/ffmpeg/include /opt/ffmpeg/lib /opt/ffmpeg/lib/pkgconfig
    cd /tmp/hwaccel_src
    
    echo "Cloning nv-codec-headers..."
    git clone --depth 1 https://github.com/FFmpeg/nv-codec-headers.git
    cd nv-codec-headers
    make install PREFIX="/opt/ffmpeg"
    cd /tmp/hwaccel_src
    
    export PKG_CONFIG_PATH="/opt/ffmpeg/lib/pkgconfig:/opt/miniconda/lib/pkgconfig:/opt/miniconda/share/pkgconfig"
    
    if [ ! -f "/opt/miniconda/lib/pkgconfig/dav1d.pc" ]; then
        echo "Building dav1d from source..."
        git clone --depth 1 https://code.videolan.org/videolan/dav1d.git
        cd dav1d
        meson setup build --prefix=/opt/miniconda --libdir=lib
        ninja -C build
        ninja -C build install
        cd /tmp/hwaccel_src
    fi
    
    echo "Cloning FFmpeg..."
    git config --global http.postBuffer 524288000
    git config --global http.maxRequestBuffer 100M
    git config --global core.compression 0
    
    if ! git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git ffmpeg; then
        echo "Shallow clone failed, trying full clone..."
        git clone https://github.com/FFmpeg/FFmpeg.git ffmpeg
    fi
    
    cd ffmpeg
    
    which nvcc

    if command -v nvcc &> /dev/null; then
        CUDA_FLAGS="--enable-cuda-nvcc --enable-libnpp --enable-nvenc --enable-nvdec"
    else
        CUDA_FLAGS=""
    fi
    
    echo "Configuring FFmpeg..."
    ./configure --prefix="/opt/ffmpeg" --extra-cflags="-I/opt/miniconda/include -I/opt/ffmpeg/include -fPIC" --extra-ldflags="-L/opt/miniconda/lib" --extra-libs="-lm -lstdc++" --enable-shared --disable-static --enable-pic --enable-gpl --enable-nonfree --enable-version3 --enable-pthreads --enable-libx264 --enable-libx265 --enable-libaom --enable-libdav1d --enable-librav1e --enable-libsvtav1 --enable-libvpx --enable-libvpl ${CUDA_FLAGS} --enable-openssl --enable-lzma --enable-bzlib --enable-zlib --enable-runtime-cpudetect --enable-hardcoded-tables --enable-optimizations --disable-doc --disable-ffplay --disable-debug
    
    echo "Building FFmpeg..."
    make -j$(nproc)
    make install
    
    echo "/opt/ffmpeg/lib" > /etc/ld.so.conf.d/ffmpeg.conf
    echo "/opt/miniconda/lib" >> /etc/ld.so.conf.d/ffmpeg.conf
    ldconfig
    
    export LD_LIBRARY_PATH="/opt/ffmpeg/lib:/opt/miniconda/lib:$LD_LIBRARY_PATH"
    
    echo "Verifying FFmpeg installation..."
    /opt/ffmpeg/bin/ffmpeg -version
    """
]

[tool.cibuildwheel.linux.environment]
FFMPEG_ROOT = "/opt/ffmpeg"
HDF5_ROOT = "/opt/miniconda"
PKG_CONFIG_PATH = "/opt/ffmpeg/lib/pkgconfig:/opt/miniconda/lib/pkgconfig:/opt/miniconda/share/pkgconfig"
LD_LIBRARY_PATH = "/opt/ffmpeg/lib:/opt/miniconda/lib"
CPPFLAGS = "-I/opt/miniconda/include -I/opt/ffmpeg/include"
LDFLAGS = "-L/opt/miniconda/lib -L/opt/ffmpeg/lib"

[tool.cibuildwheel.macos]
before-all = [
    """
    curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o miniconda.sh
    bash miniconda.sh -b -p $HOME/miniconda
    
    $HOME/miniconda/bin/conda config --add channels conda-forge
    $HOME/miniconda/bin/conda config --set channel_priority strict
    $HOME/miniconda/bin/conda update -y conda
    
    $HOME/miniconda/bin/conda install -y \
        hdf5 \
        hdf5-external-filter-plugins \
        pkg-config \
        clang_osx-arm64 \
        clangxx_osx-arm64 \
        cmake \
        ninja \
        meson \
        nasm \
        yasm \
        git \
        autoconf \
        automake \
        libtool \
        make \
        -c conda-forge
    
    $HOME/miniconda/bin/conda install -y \
        x264 \
        x265 \
        aom \
        libvpx \
        dav1d \
        rav1e \
        svt-av1 \
        zlib \
        bzip2 \
        xz \
        lz4 \
        zstd \
        -c conda-forge
    
    $HOME/miniconda/bin/conda install -y \
        openssl \
        -c conda-forge
    
    export PKG_CONFIG_PATH="$HOME/miniconda/lib/pkgconfig"
    export DYLD_LIBRARY_PATH="$HOME/miniconda/lib"
    export CFLAGS="-I$HOME/miniconda/include"
    export CXXFLAGS="-I$HOME/miniconda/include"
    export LDFLAGS="-L$HOME/miniconda/lib"
    export MACOSX_DEPLOYMENT_TARGET="15.0"
    export ARCHFLAGS="-arch arm64"
    export CC=/usr/bin/clang
    export CXX=/usr/bin/clang++

    OLD_LD_LIBRARY_PATH=$LD_LIBRARY_PATH
    OLD_DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH

    unset LD_LIBRARY_PATH
    unset DYLD_LIBRARY_PATH
    
    mkdir -p /tmp/hwaccel_src $HOME/ffmpeg/include $HOME/ffmpeg/lib $HOME/ffmpeg/lib/pkgconfig
    cd /tmp/hwaccel_src
    
    /usr/bin/git clone --depth 1 https://github.com/FFmpeg/FFmpeg.git ffmpeg
    cd ffmpeg
    
    ./configure \
        --prefix="$HOME/ffmpeg" \
        --extra-cflags="-I$HOME/miniconda/include -I$HOME/ffmpeg/include" \
        --extra-ldflags="-L$HOME/miniconda/lib -L$HOME/ffmpeg/lib" \
        --extra-libs="-lm -lstdc++" \
        --pkg-config-flags="--static" \
        --enable-shared \
        --disable-static \
        --enable-pic \
        --enable-gpl \
        --enable-nonfree \
        --enable-version3 \
        --enable-pthreads \
        --enable-libx264 \
        --enable-libx265 \
        --enable-libaom \
        --enable-libdav1d \
        --enable-librav1e \
        --enable-libsvtav1 \
        --enable-libvpx \
        --enable-videotoolbox \
        --enable-audiotoolbox \
        --enable-openssl \
        --enable-lzma \
        --enable-bzlib \
        --enable-zlib \
        --enable-runtime-cpudetect \
        --enable-hardcoded-tables \
        --enable-optimizations \
        --disable-doc \
        --disable-ffplay \
        --disable-debug \
        --cc=$CC \
        --cxx=$CXX
    
    make -j$(sysctl -n hw.ncpu)
    make install
    
    $HOME/ffmpeg/bin/ffmpeg -version
    
    $HOME/ffmpeg/bin/ffmpeg -encoders | grep -E "(libx264|libx265|libaom|librav1e|libsvtav1|libvpx)" || echo "Some video encoders missing"
    $HOME/ffmpeg/bin/ffmpeg -decoders | grep -E "(h264|hevc|av1|vp9)" || echo "Some video decoders missing"
    $HOME/ffmpeg/bin/ffmpeg -encoders | grep -E "(videotoolbox)" || echo "VideoToolbox encoder not available"
    """
]

[tool.cibuildwheel.macos.environment]
FFMPEG_ROOT = "$HOME/ffmpeg"
HDF5_ROOT = "$HOME/miniconda"
CC = "/usr/bin/clang"
CXX = "/usr/bin/clang++"
PKG_CONFIG_PATH = "$HOME/ffmpeg/lib/pkgconfig:$HOME/miniconda/lib/pkgconfig"
DYLD_LIBRARY_PATH = "$HOME/ffmpeg/lib:$HOME/miniconda/lib"
MACOSX_DEPLOYMENT_TARGET = "15.0"
ARCHFLAGS = "-arch arm64"
CFLAGS = "-I$HOME/miniconda/include -I$HOME/ffmpeg/include -fno-lto"
CXXFLAGS = "-I$HOME/miniconda/include -I$HOME/ffmpeg/include -fno-lto"
LDFLAGS = "-L$HOME/miniconda/lib -L$HOME/ffmpeg/lib -Wl,-headerpad_max_install_names -fno-lto"

repair-wheel-command = [
    "DYLD_LIBRARY_PATH=$HOME/ffmpeg/lib:$HOME/miniconda/lib delocate-listdeps {wheel}",
    "DYLD_LIBRARY_PATH=$HOME/ffmpeg/lib:$HOME/miniconda/lib delocate-wheel --require-archs arm64 -w {dest_dir} {wheel}"
]

[tool.cibuildwheel.windows]
before-all = '''
call scripts\build_windows.bat
'''