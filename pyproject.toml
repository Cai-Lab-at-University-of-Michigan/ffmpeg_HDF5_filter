[build-system]
requires = [
    "setuptools>=42",
    "wheel",
    "numpy>=1.15.0",
]
build-backend = "setuptools.build_meta"

[tool.cibuildwheel]
build = ["cp311-*", "cp312-*"]
skip = ["*-musllinux*", "*-win32", "*-manylinux_i686"]
test-requires = "pytest numpy h5py"
test-command = "python -c 'import h5ffmpeg; print(\"Import successful\")'"

[tool.cibuildwheel.linux]
before-all = [
    # Install miniconda and HDF5 via conda-forge
    """
    curl -L https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
    bash miniconda.sh -b -p /opt/miniconda
    /opt/miniconda/bin/conda install -y hdf5 hdf5-external-filter-plugins pkg-config gcc_linux-64 gxx_linux-64 -c conda-forge
    echo "HDF5 and build tools installed via conda-forge"
    
    # Verify installation
    /opt/miniconda/bin/pkg-config --cflags --libs hdf5 || echo "HDF5 pkg-config test failed"
    
    if [ -f "/opt/miniconda/include/hdf5.h" ]; then
        echo "HDF5 headers found in conda environment"
    else
        echo "HDF5 headers not found"
    fi
    
    if [ -f "/opt/miniconda/lib/libhdf5.so" ]; then
        echo "HDF5 libraries found in conda environment"
    else
        echo "HDF5 libraries not found"
    fi
    """,
    # Run your FFmpeg build script
    """
    cp scripts/build_linux.sh /tmp/
    chmod +x /tmp/build_linux.sh
    export CI_BUILD=1
    export TARGET_ARCH=x86_64
    
    # Make conda environment available to build script
    export PATH="/opt/miniconda/bin:$PATH"
    export PKG_CONFIG_PATH="/opt/miniconda/lib/pkgconfig:$PKG_CONFIG_PATH"
    export LD_LIBRARY_PATH="/opt/miniconda/lib:$LD_LIBRARY_PATH"
    
    cd /tmp
    ./build_linux.sh
    if [ -d "/tmp/ffmpeg_build" ]; then
        mkdir -p /opt/ffmpeg
        cp -r /tmp/ffmpeg_build/* /opt/ffmpeg/
    fi
    /opt/ffmpeg/bin/ffmpeg -version
    echo "FFmpeg build completed"
    """
]

[tool.cibuildwheel.linux.environment]
FFMPEG_ROOT = "/opt/ffmpeg"
HDF5_ROOT = "/opt/miniconda"
PKG_CONFIG_PATH = "/opt/ffmpeg/lib/pkgconfig:/opt/miniconda/lib/pkgconfig"
LD_LIBRARY_PATH = "/opt/ffmpeg/lib:/opt/miniconda/lib:$LD_LIBRARY_PATH"
PATH = "/opt/ffmpeg/bin:/opt/miniconda/bin:$PATH"
CPPFLAGS = "-I/opt/miniconda/include"
LDFLAGS = "-L/opt/miniconda/lib"

repair-wheel-command = "auditwheel repair -w {dest_dir} {wheel}"

[tool.cibuildwheel.macos]
before-all = [
    "brew install hdf5 pkg-config",
    """
    cp scripts/build_macos.sh /tmp/
    chmod +x /tmp/build_macos.sh
    export TARGET_ARCH="arm64"
    export MACOSX_DEPLOYMENT_TARGET="14.0"
    export ARCHFLAGS="-arch arm64"
    cd /tmp
    ./build_macos.sh
    if [ -d "/tmp/ffmpeg_build" ]; then
        mkdir -p $HOME/ffmpeg
        cp -r /tmp/ffmpeg_build/* $HOME/ffmpeg/
    fi
    $HOME/ffmpeg/bin/ffmpeg -version
    echo "FFmpeg build completed"
    """
]

[tool.cibuildwheel.macos.environment]
FFMPEG_ROOT = "$HOME/ffmpeg"
PKG_CONFIG_PATH = "$HOME/ffmpeg/lib/pkgconfig:/opt/homebrew/lib/pkgconfig"
DYLD_LIBRARY_PATH = "$HOME/ffmpeg/lib:$DYLD_LIBRARY_PATH"
PATH = "$HOME/ffmpeg/bin:$PATH"
MACOSX_DEPLOYMENT_TARGET = "14.0"
ARCHFLAGS = "-arch arm64"

repair-wheel-command = [
    "DYLD_LIBRARY_PATH=$HOME/ffmpeg/lib delocate-listdeps {wheel}",
    "DYLD_LIBRARY_PATH=$HOME/ffmpeg/lib delocate-wheel --require-archs arm64 -w {dest_dir} {wheel}"
]

[tool.cibuildwheel.windows]
before-all = [
    """
    curl -L https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Windows-x86_64.exe -o miniforge.exe
    start /wait "" miniforge.exe /InstallationType=JustMe /RegisterPython=0 /S /D=C:\\Miniforge3
    C:\\Miniforge3\\Scripts\\conda.exe install -y hdf5 hdf5-external-filter-plugins -c conda-forge
    """,
    """
    mkdir C:\\ffmpeg_build\\bin 2>nul
    mkdir C:\\ffmpeg_build\\lib 2>nul  
    mkdir C:\\ffmpeg_build\\include 2>nul
    mkdir C:\\temp_msys2 2>nul
    
    powershell -Command "& {
      $packages = @{
        'ffmpeg' = 'https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-ffmpeg-7.1-3-any.pkg.tar.zst'
        'x264' = 'https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-libx264-0.164.r3161.a354f11-3-any.pkg.tar.zst'
        'x265' = 'https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-x265-4.1-2-any.pkg.tar.zst'
        'xvidcore' = 'https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-xvidcore-1.3.7-4-any.pkg.tar.zst'
        'aom' = 'https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-aom-3.12.1-1-any.pkg.tar.zst'
        'dav1d' = 'https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-dav1d-1.5.0-1-any.pkg.tar.zst'
        'svt-av1' = 'https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-svt-av1-3.0.2-2-any.pkg.tar.zst'
        'rav1e' = 'https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-rav1e-0.7.1-7-any.pkg.tar.zst'
        'libvpl' = 'https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-libvpl-2.15.0-1-any.pkg.tar.zst'
        'libvpx' = 'https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-libvpx-1.15.0-1-any.pkg.tar.zst'
        }
      
      choco install zstandard -y --no-progress --force
      
      foreach ($pkg in $packages.GetEnumerator()) {
        $filename = Split-Path $pkg.Value -Leaf
        $downloadPath = \"C:\\temp_msys2\\$filename\"
        
        Write-Host \"Downloading $($pkg.Key)...\"
        Invoke-WebRequest -Uri $pkg.Value -OutFile $downloadPath -UserAgent 'Mozilla/5.0' -TimeoutSec 300
        
        Write-Host \"Extracting $($pkg.Key)...\"
        Set-Location 'C:\\temp_msys2'
        tar --use-compress-program=zstd -xf $filename
        
        if (Test-Path 'mingw64\\bin') {
          Copy-Item 'mingw64\\bin\\*' 'C:\\ffmpeg_build\\bin\\' -Recurse -Force -ErrorAction SilentlyContinue
        }
        if (Test-Path 'mingw64\\lib') {
          Copy-Item 'mingw64\\lib\\*' 'C:\\ffmpeg_build\\lib\\' -Recurse -Force -ErrorAction SilentlyContinue
        }
        if (Test-Path 'mingw64\\include') {
          Copy-Item 'mingw64\\include\\*' 'C:\\ffmpeg_build\\include\\' -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        Remove-Item 'mingw64' -Recurse -Force -ErrorAction SilentlyContinue
        Remove-Item $filename -Force -ErrorAction SilentlyContinue
      }
    }"
    
    rmdir /S /Q C:\\temp_msys2 2>nul
    """,
    """
    if exist "C:\\ffmpeg_build\\bin\\ffmpeg.exe" (
        echo FFmpeg found
        C:\\ffmpeg_build\\bin\\ffmpeg.exe -version
    ) else (
        echo ERROR: FFmpeg not found
        exit 1
    )
    if exist "C:\\Miniforge3\\Library\\include\\hdf5.h" (
        echo HDF5 found
    ) else (
        echo ERROR: HDF5 not found
        exit 1
    )
    echo Final verification complete
    echo FFMPEG_ROOT will be: C:\\ffmpeg_build
    echo HDF5_ROOT will be: C:\\Miniforge3\\Library
    dir "C:\\ffmpeg_build" 2>nul
    dir "C:\\Miniforge3\\Library" 2>nul
    """
]

[tool.cibuildwheel.windows.environment]
FFMPEG_ROOT = "C:/ffmpeg_build"
HDF5_ROOT = "C:/Miniforge3/Library"
PKG_CONFIG_PATH = "C:/ffmpeg_build/lib/pkgconfig"
PATH = "C:/ffmpeg_build/bin;C:/Miniforge3/Library/bin;$PATH"
INCLUDE = "C:/ffmpeg_build/include;C:/Miniforge3/Library/include;$INCLUDE"
LIB = "C:/ffmpeg_build/lib;C:/Miniforge3/Library/lib;$LIB"

repair-wheel-command = "delvewheel repair -w {dest_dir} {wheel} --add-path C:/ffmpeg_build/bin;C:/Miniforge3/Library/bin"