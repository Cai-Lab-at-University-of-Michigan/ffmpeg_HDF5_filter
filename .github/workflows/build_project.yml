name: Build and Publish Wheels

permissions:
  contents: write

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU (Linux only)
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.23.3

      - name: Package libraries for shared lib build
        if: runner.os != 'Linux'
        shell: bash
        run: |
          mkdir -p shared_lib_package
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [[ -d "D:/a/ffmpeg_build" ]]; then
              cp -r D:/a/ffmpeg_build/* shared_lib_package/ 2>/dev/null || echo "Error copying Windows build"
            fi
            
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            if [[ -d "$HOME/ffmpeg" ]]; then
              mkdir -p shared_lib_package/ffmpeg
              cp -r ~/ffmpeg/* shared_lib_package/ffmpeg/ 2>/dev/null || echo "Error copying FFmpeg"
            fi
            
            if [[ -d "$HOME/miniconda" ]]; then
              mkdir -p shared_lib_package/miniconda
              cp -r ~/miniconda/lib shared_lib_package/miniconda/ 2>/dev/null || echo "Error copying conda lib"
              cp -r ~/miniconda/include shared_lib_package/miniconda/ 2>/dev/null || echo "Error copying conda include"
              cp -r ~/miniconda/share shared_lib_package/miniconda/ 2>/dev/null || echo "Error copying conda share"
              cp -r ~/miniconda/bin shared_lib_package/miniconda/ 2>/dev/null || echo "Error copying conda bin"
            fi
          fi
          
          tar -czf shared_lib_deps_${{ matrix.os }}.tar.gz -C shared_lib_package .

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}
          path: ./wheelhouse/*.whl
          retention-days: 7

      - name: Upload shared lib dependencies
        if: runner.os != 'Linux'
        uses: actions/upload-artifact@v4
        with:
          name: shared-lib-deps-${{ matrix.os }}
          path: shared_lib_deps_${{ matrix.os }}.tar.gz
          retention-days: 7

  build_shared_libs_windows_macos:
    name: Build shared libraries on ${{ matrix.os }}
    needs: [build_wheels]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v4

      - name: Install build tools
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install cmake
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'
          fi

      - name: Download shared lib dependencies
        uses: actions/download-artifact@v4
        with:
          name: shared-lib-deps-${{ matrix.os }}
          path: ./deps_archive/

      - name: Extract dependencies
        shell: bash
        run: |
          mkdir -p deps
          cd deps_archive
          tar -xzf shared_lib_deps_${{ matrix.os }}.tar.gz -C ../deps/
          
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            if [[ -d "../deps/ffmpeg" ]]; then
              mkdir -p "$HOME/ffmpeg"
              cp -r ../deps/ffmpeg/* "$HOME/ffmpeg/"
              echo "Restored FFmpeg to $HOME/ffmpeg"
            fi
            
            if [[ -d "../deps/miniconda" ]]; then
              mkdir -p "$HOME/miniconda"
              cp -r ../deps/miniconda/* "$HOME/miniconda/"
              echo "Restored miniconda to $HOME/miniconda"
            fi
            
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            if [[ -d "../deps" ]]; then
              mkdir -p "$HOME/ffmpeg_build"
              cp -r ../deps/* "$HOME/ffmpeg_build/"
              echo "Restored dependencies to $HOME/ffmpeg_build"
            fi
          fi

      - name: Build shared library
        shell: bash
        run: |
          mkdir build
          cd build
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cmake .. -G "Visual Studio 17 2022" -A x64
            cmake --build . --config Release
            cmake --install . --prefix ../install --config Release
          else
            cmake .. -DCMAKE_BUILD_TYPE=Release
            cmake --build . --target bundle_all
            cmake --install . --prefix ../install
          fi

      - name: Package shared library bundle
        shell: bash
        run: |
          cd install
          
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a -tzip "../h5ffmpeg_shared_bundle_${{ matrix.os }}.zip" .
          else
            tar -czf "../h5ffmpeg_shared_bundle_${{ matrix.os }}.tar.gz" .
          fi

      - name: Upload shared library bundle
        uses: actions/upload-artifact@v4
        with:
          name: shared-lib-bundle-${{ matrix.os }}
          path: |
            h5ffmpeg_shared_bundle_*.zip
            h5ffmpeg_shared_bundle_*.tar.gz
          retention-days: 7

  build_shared_libs_linux:
    name: Build shared libraries on ubuntu-latest
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v4

      - name: Build dependencies and shared library
        shell: bash
        run: |
          chmod +x scripts/build_ubuntu_pkg.sh
          ./scripts/build_ubuntu_pkg.sh

      - name: Build shared library
        shell: bash
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Release
          cmake --build . --target bundle_all
          cmake --install . --prefix ../install

      - name: Package shared library bundle
        shell: bash
        run: |
          cd install
          tar -czf "../h5ffmpeg_shared_bundle_ubuntu-latest.tar.gz" .

      - name: Upload shared library bundle
        uses: actions/upload-artifact@v4
        with:
          name: shared-lib-bundle-ubuntu-latest
          path: h5ffmpeg_shared_bundle_ubuntu-latest.tar.gz
          retention-days: 7

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      
      - name: Build sdist
        run: |
          python -m pip install --upgrade pip build
          python -m build --sdist
      
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ./dist/*.tar.gz
          retention-days: 7

  assemble_java:
    name: Assemble Java JAR
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Check if Java project exists
        run: |
          if [[ ! -d "imagej-hdf5-wrapper" ]]; then
            echo "ERROR: imagej-hdf5-wrapper directory not found"
            exit 1
          fi

      - name: Build JAR with Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Run Gradle build
        working-directory: imagej-hdf5-wrapper
        run: ./gradlew packJar --no-daemon

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: hdf5-ffmpeg-jar
          path: imagej-hdf5-wrapper/build/libs/HDF5_ffmpeg-*.jar

  publish:
    name: Publish to PyPI and GitHub Releases
    needs: [build_wheels, build_sdist, assemble_java, build_shared_libs_windows_macos, build_shared_libs_linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref)) || github.event_name == 'workflow_dispatch'
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install publishing tools
        run: |
          python -m pip install --upgrade pip twine
          mkdir -p dist java-dist shared-libs-dist

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Collect all distributions
        run: |
          find artifacts/ -name "*.whl" -exec cp {} dist/ \;
          find artifacts/sdist/ -name "*.tar.gz" -exec cp {} dist/ \; 2>/dev/null || true
          find artifacts/hdf5-ffmpeg-jar/ -name "*.jar" -exec cp {} java-dist/ \; 2>/dev/null || true
          find artifacts/shared-lib-bundle-*/ -name "h5ffmpeg_shared_bundle_*" -exec cp {} shared-libs-dist/ \; 2>/dev/null || true

      - name: Verify distribution files
        run: |
          python -m twine check dist/*.whl dist/*.tar.gz

      - name: Publish to TestPyPI
        if: (github.event_name == 'push' && contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref)) || github.event_name == 'workflow_dispatch'
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_API_TOKEN }}
        run: |
          python -m twine upload --repository testpypi dist/*.whl dist/*.tar.gz --verbose

      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*.whl dist/*.tar.gz --verbose

      - name: Delete previous snapshot release
        if: github.event_name == 'push' && contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref)
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          tag_name: snapshot-${{ github.ref_name }}
          delete_release: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Get timestamp for snapshot
        id: timestamp
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
        run: echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref))
        uses: softprops/action-gh-release@v2
        with:
          files: |
            java-dist/*.jar
            dist/*.whl
            dist/*.tar.gz
            shared-libs-dist/*
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('snapshot-{0}', github.ref_name) }}
          name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('Snapshot {0} ({1})', github.ref_name, steps.timestamp.outputs.timestamp) }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          draft: false
          body: |
            ${{ !startsWith(github.ref, 'refs/tags/') && format('Development build from {0} branch
            
            **Commit:** {1}
            **Created:** {2}
            
            This is an automated snapshot build. Use at your own risk.', github.ref_name, github.sha, steps.timestamp.outputs.timestamp) || 'Release build' }}
            
            ## Available Downloads:
            - **Python Wheels** (.whl) - Install with pip
            - **Source Distribution** (.tar.gz) - Build from source
            - **Java JAR** - ImageJ/Fiji plugin
            - **Shared Library Bundles** - Self-contained C libraries:
              - `h5ffmpeg_shared_bundle_windows-latest.zip` - Windows bundle
              - `h5ffmpeg_shared_bundle_macos-latest.tar.gz` - macOS bundle  
              - `h5ffmpeg_shared_bundle_ubuntu-latest.tar.gz` - Linux bundle
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}