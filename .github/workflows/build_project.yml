name: Build and Publish Wheels

permissions:
  contents: write

on:
  push:
    branches: [main, master]
    tags: ['v*']
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.10'

jobs:
  build_ffmpeg:
    name: Build FFmpeg (${{ matrix.os }})
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 120
    strategy:
      matrix:
        include:
          - os: linux
            runner: ubuntu-latest
            script: build_linux.sh
            artifact_name: ffmpeg-Linux
            target_arch: x86_64
          - os: windows
            runner: ubuntu-latest
            script: build_windows.sh
            artifact_name: ffmpeg-Windows
            target_arch: AMD64
          - os: macos
            runner: macos-14
            script: build_macos.sh
            artifact_name: ffmpeg-macOS
            target_arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check if build scripts exist
        run: |
          if [[ ! -f "scripts/${{ matrix.script }}" ]]; then
            echo "ERROR: Script scripts/${{ matrix.script }} not found"
            echo "Available files in scripts directory:"
            ls -la scripts/ || echo "scripts/ directory does not exist"
            exit 1
          fi

      - name: Free disk space (Linux/Windows)
        if: matrix.os == 'linux' || matrix.os == 'windows'
        run: |
          sudo apt-get remove -y '^dotnet-.*' '^llvm-.*' '^mongodb-.*' '^mysql-.*' '^postgresql-.*'
          sudo apt-get autoremove -y && sudo apt-get autoclean
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
          df -h

      - name: Clean build directories
        run: |
          BUILD_DIR=${{ matrix.os == 'windows' && 'ffmpeg_build_windows' || 'ffmpeg_build' }}
          SRC_DIR=${{ matrix.os == 'windows' && 'ffmpeg_src_windows' || 'ffmpeg_src' }}
          
          rm -rf "$BUILD_DIR" "$SRC_DIR" build_logs
          mkdir -p "$BUILD_DIR"

      - name: Cache FFmpeg dependencies
        uses: actions/cache@v4
        with:
          path: |
            ffmpeg_build*
            ffmpeg_src*
          key: ${{ matrix.os }}-ffmpeg-v2-${{ hashFiles('scripts/${{ matrix.script }}') }}
          restore-keys: |
            ${{ matrix.os }}-ffmpeg-v2-
            ${{ matrix.os }}-ffmpeg-

      - name: Build FFmpeg
        run: |
          chmod +x scripts/${{ matrix.script }}
          
          export TARGET_ARCH="${{ matrix.target_arch }}"
          
          if [[ "${{ matrix.os }}" == "windows" || "${{ matrix.os }}" == "linux" ]]; then
            export DEBIAN_FRONTEND=noninteractive
            export CI_BUILD=1
          fi
          
          echo "Building FFmpeg for architecture: ${TARGET_ARCH}"
          ./scripts/${{ matrix.script }}

      - name: Verify build output
        run: |
          BUILD_DIR=${{ matrix.os == 'windows' && 'ffmpeg_build_windows' || 'ffmpeg_build' }}
          
          echo "=== Build Verification ==="
          find "${BUILD_DIR}" -type f \( -name "ffmpeg*" -o -name "*.exe" -o -name "*.dll" -o -name "*.so*" -o -name "*.dylib" \) 2>/dev/null | head -10 || true
          
          echo "=== Hardware Acceleration Check ==="
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            command -v wine &> /dev/null && wine "${BUILD_DIR}/bin/ffmpeg.exe" -hwaccels 2>/dev/null || echo "Wine test skipped"
          else
            export LD_LIBRARY_PATH="${BUILD_DIR}/lib:$LD_LIBRARY_PATH"
            "${BUILD_DIR}/bin/ffmpeg" -hwaccels 2>/dev/null || true
          fi

      - name: Package artifacts
        run: |
          BUILD_DIR=${{ matrix.os == 'windows' && 'ffmpeg_build_windows' || 'ffmpeg_build' }}
          
          mkdir -p upload_artifacts
          cp -r "${BUILD_DIR}"/* upload_artifacts/
          
          if [[ "${{ matrix.os }}" == "windows" ]]; then
            find upload_artifacts/lib -name "*.dll" -exec mv {} upload_artifacts/bin/ \; 2>/dev/null || true
            echo "Windows build verification:"
            find upload_artifacts/bin -name "*.exe" -o -name "*.dll" 2>/dev/null | head -10 || true
          fi

      - name: Upload FFmpeg artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: upload_artifacts/
          retention-days: 7

      - name: Upload build logs (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.os }}
          path: build_logs/
          retention-days: 3

  build_wheels:
    name: Build wheels (${{ matrix.config.os }}, Python ${{ matrix.python }})
    needs: build_ffmpeg
    runs-on: ${{ matrix.config.runner }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: linux
            runner: ubuntu-latest
            artifact_name: ffmpeg-Linux
            cibw_archs: "x86_64"
            wheel_arch: "x86_64"
          - os: windows
            runner: windows-2022
            artifact_name: ffmpeg-Windows
            cibw_archs: "AMD64"
            wheel_arch: "amd64"
          - os: macos
            runner: macos-14
            artifact_name: ffmpeg-macOS
            cibw_archs: "arm64"
            wheel_arch: "arm64"
        python: ['3.9', '3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip cibuildwheel setuptools wheel

      - name: Download FFmpeg artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.config.artifact_name }}
          path: ffmpeg_build

      # === DEBUGGING: Verify artifact download ===
      - name: Debug - Verify FFmpeg artifacts (Linux/macOS)
        if: matrix.config.os != 'windows'
        run: |
          echo "=== FFmpeg Artifact Contents ==="
          ls -la ffmpeg_build/
          echo ""
          echo "=== FFmpeg bin directory ==="
          ls -la ffmpeg_build/bin/ || echo "No bin directory found"
          echo ""
          echo "=== FFmpeg lib directory ==="
          ls -la ffmpeg_build/lib/ || echo "No lib directory found"
          echo ""
          echo "=== Current working directory ==="
          pwd
          ls -la

      - name: Debug - Verify FFmpeg artifacts (Windows)
        if: matrix.config.os == 'windows'
        shell: pwsh
        run: |
          Write-Host "=== FFmpeg Artifact Contents ==="
          Get-ChildItem ffmpeg_build\ -Recurse | Select-Object FullName, Length
          Write-Host ""
          Write-Host "=== Current working directory ==="
          Get-Location
          Get-ChildItem

      - name: Setup environment (Linux/macOS)
        if: matrix.config.os != 'windows'
        run: |
          FFMPEG_ROOT="${{ github.workspace }}/ffmpeg_build"
          echo "FFMPEG_ROOT=$FFMPEG_ROOT" >> $GITHUB_ENV
          chmod -R +x "$FFMPEG_ROOT/bin" 2>/dev/null || true

      - name: Setup environment (Windows)
        if: matrix.config.os == 'windows'
        shell: pwsh
        run: |
          $FFMPEG_ROOT = "${{ github.workspace }}\ffmpeg_build"
          echo "FFMPEG_ROOT=$FFMPEG_ROOT" >> $env:GITHUB_ENV
          echo "$FFMPEG_ROOT\bin" >> $env:GITHUB_PATH

      # === DEBUGGING: Verify environment setup ===
      - name: Debug - Verify environment setup (Linux/macOS)
        if: matrix.config.os != 'windows'
        run: |
          echo "=== Environment Variables ==="
          echo "FFMPEG_ROOT: $FFMPEG_ROOT"
          echo "PATH: $PATH"
          echo "PKG_CONFIG_PATH: $PKG_CONFIG_PATH"
          echo ""
          echo "=== FFmpeg Installation Check ==="
          ls -la "$FFMPEG_ROOT" || echo "FFMPEG_ROOT directory not found"
          ls -la "$FFMPEG_ROOT/bin" || echo "FFMPEG_ROOT/bin directory not found"
          ls -la "$FFMPEG_ROOT/lib" || echo "FFMPEG_ROOT/lib directory not found"
          echo ""
          echo "=== Test FFmpeg executables ==="
          "$FFMPEG_ROOT/bin/ffmpeg" -version || echo "ffmpeg executable not working"
          "$FFMPEG_ROOT/bin/pkg-config" --version || echo "pkg-config not working"
          echo ""
          echo "=== System info ==="
          uname -a
          python --version
          which python
          echo ""
          echo "=== Available system packages ==="
          if command -v apt >/dev/null 2>&1; then
            apt list --installed | grep -E "(gcc|g\+\+|make|cmake|hdf5)" || echo "No relevant packages found"
          elif command -v yum >/dev/null 2>&1; then
            yum list installed | grep -E "(gcc|g\+\+|make|cmake|hdf5)" || echo "No relevant packages found"
          fi

      - name: Debug - Verify environment setup (Windows)
        if: matrix.config.os == 'windows'
        shell: pwsh
        run: |
          Write-Host "=== Environment Variables ==="
          Write-Host "FFMPEG_ROOT: $env:FFMPEG_ROOT"
          Write-Host "PATH: $env:PATH"
          Write-Host "PKG_CONFIG_PATH: $env:PKG_CONFIG_PATH"
          Write-Host ""
          Write-Host "=== FFmpeg Installation Check ==="
          if (Test-Path $env:FFMPEG_ROOT) {
            Get-ChildItem $env:FFMPEG_ROOT
          } else {
            Write-Host "FFMPEG_ROOT directory not found"
          }
          if (Test-Path "$env:FFMPEG_ROOT\bin") {
            Get-ChildItem "$env:FFMPEG_ROOT\bin"
          } else {
            Write-Host "FFMPEG_ROOT\bin directory not found"
          }
          Write-Host ""
          Write-Host "=== Test FFmpeg executables ==="
          try {
            & "$env:FFMPEG_ROOT\bin\ffmpeg.exe" -version
          } catch {
            Write-Host "ffmpeg executable not working: $($_.Exception.Message)"
          }
          Write-Host ""
          Write-Host "=== System info ==="
          Get-ComputerInfo | Select-Object WindowsProductName, WindowsVersion
          python --version
          Get-Command python | Select-Object Source

      # === DEBUGGING: Test build environment before cibuildwheel ===
      - name: Debug - Test build environment (Linux/macOS)
        if: matrix.config.os != 'windows'
        run: |
          echo "=== Testing basic build tools ==="
          gcc --version || echo "gcc not available"
          g++ --version || echo "g++ not available"
          make --version || echo "make not available"
          cmake --version || echo "cmake not available"
          echo ""
          echo "=== Python build environment ==="
          python -c "import sys; print(f'Python: {sys.version}')"
          python -c "import platform; print(f'Platform: {platform.platform()}')"
          python -c "import sysconfig; print(f'Python lib: {sysconfig.get_config_var(\"LIBDIR\")}')"
          echo ""
          echo "=== Test pkg-config with FFmpeg ==="
          export PKG_CONFIG_PATH="$FFMPEG_ROOT/lib/pkgconfig:$PKG_CONFIG_PATH"
          pkg-config --list-all | grep -i ffmpeg || echo "No FFmpeg pkg-config files found"
          pkg-config --cflags libavcodec || echo "libavcodec pkg-config not working"

      - name: Debug - Test build environment (Windows)
        if: matrix.config.os == 'windows'
        shell: pwsh
        run: |
          Write-Host "=== Testing basic build tools ==="
          try { & cl } catch { Write-Host "MSVC cl not available: $($_.Exception.Message)" }
          try { & cmake --version } catch { Write-Host "cmake not available: $($_.Exception.Message)" }
          Write-Host ""
          Write-Host "=== Python build environment ==="
          python -c "import sys; print(f'Python: {sys.version}')"
          python -c "import platform; print(f'Platform: {platform.platform()}')"
          Write-Host ""
          Write-Host "=== Test pkg-config with FFmpeg ==="
          $env:PKG_CONFIG_PATH = "$env:FFMPEG_ROOT\lib\pkgconfig"
          if (Test-Path "$env:FFMPEG_ROOT\lib\pkgconfig") {
            Get-ChildItem "$env:FFMPEG_ROOT\lib\pkgconfig"
          } else {
            Write-Host "No pkg-config directory found"
          }

      - name: Build wheels (Linux/macOS)
        if: matrix.config.os != 'windows'
        run: |
          # Start progress indicator for non-Windows
          while true; do echo "Building wheel... $(date)"; sleep 60; done &
          PROGRESS_PID=$!
          
          echo "=== Starting cibuildwheel ==="
          echo "CIBW_BUILD: cp${{ matrix.python | replace('.', '') }}-*"
          echo "CIBW_ARCHS: ${{ matrix.config.cibw_archs }}"
          echo "FFMPEG_ROOT: $FFMPEG_ROOT"
          
          python -m cibuildwheel --output-dir wheelhouse
          
          # Stop progress indicator
          kill $PROGRESS_PID || true
        env:
          CIBW_BUILD: "cp${{ matrix.python | replace('.', '') }}-*"
          CIBW_SKIP: "*-musllinux* *-win32 *-manylinux_i686"
          CIBW_ARCHS: ${{ matrix.config.cibw_archs }}
          CIBW_BUILD_VERBOSITY: 3
          CIBW_TEST_REQUIRES: pytest numpy

          # Linux environment
          CIBW_BEFORE_ALL_LINUX: |
            echo "=== CIBW Linux: Installing dependencies ===" &&
            yum install -y hdf5-devel patchelf && 
            echo "=== CIBW Linux: Setting up FFmpeg ===" &&
            mkdir -p /opt/ffmpeg && 
            cp -r ${FFMPEG_ROOT}/* /opt/ffmpeg/ &&
            echo "=== CIBW Linux: FFmpeg setup complete ===" &&
            ls -la /opt/ffmpeg/
          CIBW_ENVIRONMENT_LINUX: |
            FFMPEG_ROOT=/opt/ffmpeg 
            PKG_CONFIG_PATH=/opt/ffmpeg/lib/pkgconfig:$PKG_CONFIG_PATH 
            LD_LIBRARY_PATH=/opt/ffmpeg/lib:$LD_LIBRARY_PATH
            PATH=/opt/ffmpeg/bin:$PATH
            CARGO_BUILD_FLAGS="--release --jobs 2"
            CARGO_NET_FETCH_WITH_CLI=true
            RUST_LOG=info
          CIBW_BEFORE_BUILD_LINUX: |
            echo "=== CIBW Linux: Pre-build check ===" &&
            echo "FFMPEG_ROOT: $FFMPEG_ROOT" &&
            ls -la $FFMPEG_ROOT/ &&
            pkg-config --list-all | grep ffmpeg || echo "No FFmpeg pkg-config found" &&
            echo "=== CIBW Linux: Starting build ==="
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -w {dest_dir} {wheel}

          # macOS environment
          CIBW_BEFORE_ALL_MACOS: |
            echo "=== CIBW macOS: Installing dependencies ===" &&
            brew install hdf5 pkg-config && 
            echo "=== CIBW macOS: Setting up FFmpeg ===" &&
            mkdir -p $HOME/ffmpeg && 
            cp -r ${FFMPEG_ROOT}/* $HOME/ffmpeg/ &&
            echo "=== CIBW macOS: FFmpeg setup complete ===" &&
            ls -la $HOME/ffmpeg/
          CIBW_ENVIRONMENT_MACOS: |
            FFMPEG_ROOT=$HOME/ffmpeg 
            PKG_CONFIG_PATH=$HOME/ffmpeg/lib/pkgconfig:$PKG_CONFIG_PATH 
            DYLD_LIBRARY_PATH=$HOME/ffmpeg/lib:$DYLD_LIBRARY_PATH
            PATH=$HOME/ffmpeg/bin:$PATH
            MACOSX_DEPLOYMENT_TARGET=11.0
            ARCHFLAGS="-arch arm64"
            CARGO_BUILD_FLAGS="--release --jobs 2"
            CARGO_NET_FETCH_WITH_CLI=true
            RUST_LOG=info
          CIBW_BEFORE_BUILD_MACOS: |
            echo "=== CIBW macOS: Pre-build check ===" &&
            echo "FFMPEG_ROOT: $FFMPEG_ROOT" &&
            ls -la $FFMPEG_ROOT/ &&
            pkg-config --list-all | grep ffmpeg || echo "No FFmpeg pkg-config found" &&
            echo "=== CIBW macOS: Starting build ==="
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: |
            DYLD_LIBRARY_PATH=${FFMPEG_ROOT}/lib delocate-listdeps {wheel} &&
            DYLD_LIBRARY_PATH=${FFMPEG_ROOT}/lib delocate-wheel --require-archs arm64 -w {dest_dir} {wheel}

      - name: Build wheels (Windows)
        if: matrix.config.os == 'windows'
        shell: pwsh
        run: |
          Write-Host "=== Starting cibuildwheel ==="
          Write-Host "CIBW_BUILD: cp${{ matrix.python | replace('.', '') }}-*"
          Write-Host "CIBW_ARCHS: ${{ matrix.config.cibw_archs }}"
          Write-Host "FFMPEG_ROOT: $env:FFMPEG_ROOT"
          
          python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_BUILD: "cp${{ matrix.python | replace('.', '') }}-*"
          CIBW_SKIP: "*-musllinux* *-win32 *-manylinux_i686"
          CIBW_ARCHS: ${{ matrix.config.cibw_archs }}
          CIBW_BUILD_VERBOSITY: 3
          CIBW_TEST_REQUIRES: pytest numpy

          # Windows environment
          CIBW_BEFORE_ALL_WINDOWS: |
            echo "=== CIBW Windows: Setting up FFmpeg ===" &&
            if not exist C:\ffmpeg mkdir C:\ffmpeg &&
            xcopy /E /I /Y %FFMPEG_ROOT% C:\ffmpeg &&
            echo "=== CIBW Windows: FFmpeg setup complete ===" &&
            dir C:\ffmpeg
          CIBW_ENVIRONMENT_WINDOWS: |
            FFMPEG_ROOT=C:\ffmpeg 
            PKG_CONFIG_PATH=C:\ffmpeg\lib\pkgconfig 
            PATH=C:\ffmpeg\bin;%PATH%
            CARGO_BUILD_FLAGS=--release --jobs 2
            CARGO_NET_FETCH_WITH_CLI=true
            RUST_LOG=info
          CIBW_BEFORE_BUILD_WINDOWS: |
            echo "=== CIBW Windows: Pre-build check ===" &&
            echo "FFMPEG_ROOT: %FFMPEG_ROOT%" &&
            dir %FFMPEG_ROOT% &&
            echo "=== CIBW Windows: Starting build ==="
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: |
            delvewheel repair -w {dest_dir} {wheel} --add-path C:\ffmpeg\bin

      # === DEBUGGING: Check build results ===
      - name: Debug - Check build results
        if: always()
        run: |
          echo "=== Build Results ==="
          ls -la wheelhouse/ || echo "No wheelhouse directory found"
          echo ""
          echo "=== Disk usage ==="
          df -h || echo "Cannot check disk usage"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: wheels-${{ matrix.config.wheel_arch }}-${{ matrix.python }}
          retention-days: 7

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libhdf5-dev pkg-config

      - name: Build sdist
        run: |
          python -m pip install --upgrade pip build setuptools wheel
          python -m build --sdist
        env:
          PKG_CONFIG_PATH: /usr/lib/x86_64-linux-gnu/pkgconfig:/usr/share/pkgconfig

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          path: ./dist/*.tar.gz
          name: sdist
          retention-days: 7

  assemble_java:
    name: Assemble Java JAR
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Check if Java project exists
        run: |
          if [[ ! -d "imagej-hdf5-wrapper" ]]; then
            echo "ERROR: imagej-hdf5-wrapper directory not found"
            echo "Available directories:"
            ls -la
            exit 1
          fi

      - name: Build JAR with Gradle
        uses: gradle/gradle-build-action@v3
        with:
          build-root-directory: imagej-hdf5-wrapper
          arguments: packJar --info

      - name: Verify JAR contents
        run: |
          echo "=== Verifying JAR contents ==="
          JAR_FILE=$(find imagej-hdf5-wrapper/build/libs -name "HDF5-ffmpeg-*.jar" | head -1)
          
          if [[ -f "$JAR_FILE" ]]; then
            echo "JAR file: $JAR_FILE"
            echo "JAR size: $(du -h "$JAR_FILE" | cut -f1)"
            echo "=== JAR structure ==="
            unzip -l "$JAR_FILE" | head -20
          else
            echo "ERROR: JAR file not found"
            exit 1
          fi

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: hdf5-ffmpeg-jar
          path: imagej-hdf5-wrapper/build/libs/HDF5-ffmpeg-*.jar

  publish:
    name: Publish to PyPI and GitHub Releases
    needs: [build_wheels, build_sdist, assemble_java]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref)) || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install publishing tools
        run: |
          python -m pip install --upgrade pip twine
          mkdir -p dist java-dist

      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
          pattern: wheels-*
          merge-multiple: true

      - name: Download sdist
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist/

      - name: Download Java JAR
        uses: actions/download-artifact@v4
        with:
          name: hdf5-ffmpeg-jar
          path: java-dist/

      - name: Verify distribution files
        run: |
          find dist -type f \( -name "*.whl" -o -name "*.tar.gz" \) | sort
          python -m twine check dist/*.whl dist/*.tar.gz

      - name: Publish to TestPyPI
        env:
          TWINE_USERNAME: ${{ secrets.TESTPYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TESTPYPI_PASSWORD }}
        run: python -m twine upload --repository testpypi dist/*.whl dist/*.tar.gz

      - name: Publish to PyPI
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: python -m twine upload dist/*.whl dist/*.tar.gz

      - name: Delete previous snapshot release
        if: github.event_name == 'push' && contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref)
        uses: dev-drprasad/delete-tag-and-release@v0.2.1
        with:
          tag_name: snapshot-${{ github.ref_name }}
          delete_release: true
          repo: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get timestamp for snapshot
        id: timestamp
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/')
        run: echo "timestamp=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

      - name: Create GitHub release
        if: github.event_name == 'push' && (startsWith(github.ref, 'refs/tags/v') || contains(fromJSON('["refs/heads/main", "refs/heads/master"]'), github.ref))
        uses: softprops/action-gh-release@v1
        with:
          files: java-dist/HDF5-ffmpeg-*.jar
          tag_name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('snapshot-{0}', github.ref_name) }}
          name: ${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || format('Snapshot {0} ({1})', github.ref_name, steps.timestamp.outputs.timestamp) }}
          prerelease: ${{ !startsWith(github.ref, 'refs/tags/') }}
          draft: false
          body: ${{ !startsWith(github.ref, 'refs/tags/') && format('Development build from {0} branch, commit {1} created at {2}', github.ref_name, github.sha, steps.timestamp.outputs.timestamp) || '' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}